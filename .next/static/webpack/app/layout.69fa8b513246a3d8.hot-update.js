"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"fba101e305a6\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/MzYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImZiYTEwMWUzMDVhNlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/plant-store.tsx":
/*!*********************************!*\
  !*** ./src/lib/plant-store.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlantProvider: function() { return /* binding */ PlantProvider; },\n/* harmony export */   usePlantStore: function() { return /* binding */ usePlantStore; },\n/* harmony export */   usePlants: function() { return /* binding */ usePlants; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,subDays!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,subDays!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,format,subDays!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/supabase */ \"(app-pages-browser)/./src/utils/supabase.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/* __next_internal_client_entry_do_not_use__ usePlantStore,PlantProvider,usePlants auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\nconst plantIcons = [\n    \"\\uD83C\\uDF31\",\n    \"\\uD83C\\uDF43\",\n    \"\\uD83C\\uDF3F\",\n    \"\\uD83C\\uDF3A\",\n    \"\\uD83C\\uDF3B\",\n    \"\\uD83C\\uDF39\",\n    \"\\uD83C\\uDF37\",\n    \"\\uD83C\\uDF35\",\n    \"\\uD83C\\uDF45\",\n    \"\\uD83E\\uDD55\",\n    \"\\uD83C\\uDF3E\",\n    \"\\uD83C\\uDF38\",\n    \"\\uD83C\\uDF3C\",\n    \"\\uD83E\\uDEB4\",\n    \"\\uD83C\\uDF33\"\n];\nconst plantColors = [\n    \"#10B981\",\n    \"#3B82F6\",\n    \"#8B5CF6\",\n    \"#EF4444\",\n    \"#F59E0B\",\n    \"#EC4899\",\n    \"#06B6D4\",\n    \"#84CC16\",\n    \"#F97316\",\n    \"#6366F1\"\n];\nconst calculateNextWatering = (frequency)=>{\n    const nextDate = (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(new Date(), frequency);\n    const today = new Date();\n    if (frequency === 1) {\n        return \"Tomorrow\";\n    } else if (frequency <= 7) {\n        return \"in \".concat(frequency, \" days\");\n    } else {\n        return (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(nextDate, \"MMM dd\");\n    }\n};\nconst getPlantStatus = (lastWatered, frequency)=>{\n    if (!lastWatered || lastWatered === \"Just planted\") {\n        return \"healthy\";\n    }\n    const lastWateredDate = new Date(lastWatered);\n    const daysSinceWatered = Math.floor((Date.now() - lastWateredDate.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysSinceWatered > frequency + 2) {\n        return \"overdue\";\n    } else if (daysSinceWatered >= frequency) {\n        return \"needs_water\";\n    }\n    return \"healthy\";\n};\n// Convert database plant to local plant format\nconst dbPlantToLocal = (dbPlant)=>({\n        id: dbPlant.id,\n        name: dbPlant.name,\n        species: dbPlant.species,\n        plantingDate: dbPlant.plantingDate || dbPlant.plantedDate || new Date().toISOString(),\n        wateringFrequency: dbPlant.wateringFrequency,\n        icon: dbPlant.icon,\n        iconColor: dbPlant.iconColor,\n        lastWatered: dbPlant.lastWatered,\n        nextWatering: dbPlant.nextWatering,\n        status: dbPlant.status,\n        notes: dbPlant.notes,\n        noteAttachments: dbPlant.noteAttachments,\n        imageUrl: dbPlant.imageUrl,\n        createdAt: dbPlant.createdAt,\n        updatedAt: dbPlant.updatedAt\n    });\n// Convert local plant to database format\nconst localPlantToDb = (localPlant, userId)=>({\n        name: localPlant.name,\n        species: localPlant.species,\n        plantedDate: localPlant.plantingDate,\n        plantingDate: localPlant.plantingDate,\n        wateringFrequency: localPlant.wateringFrequency,\n        icon: localPlant.icon,\n        iconColor: localPlant.iconColor,\n        lastWatered: localPlant.lastWatered,\n        nextWatering: localPlant.nextWatering || calculateNextWatering(localPlant.wateringFrequency),\n        status: localPlant.status,\n        notes: localPlant.notes,\n        noteAttachments: localPlant.noteAttachments,\n        imageUrl: localPlant.imageUrl,\n        userId\n    });\n// Sample plants for testing\nconst createSamplePlants = ()=>{\n    const now = new Date().toISOString();\n    const yesterday = (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 1).toISOString();\n    const threeDaysAgo = (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 3).toISOString();\n    const weekAgo = (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 7).toISOString();\n    return [\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(),\n            name: \"Sunny the Sunflower\",\n            species: \"Helianthus annuus\",\n            plantingDate: (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 30).toISOString(),\n            wateringFrequency: 2,\n            icon: \"\\uD83C\\uDF3B\",\n            iconColor: \"#F59E0B\",\n            lastWatered: yesterday,\n            nextWatering: \"Tomorrow\",\n            status: \"healthy\",\n            notes: \"Growing beautifully! Loves the morning sun.\",\n            createdAt: now,\n            updatedAt: now\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(),\n            name: \"Rosie\",\n            species: \"Rosa gallica\",\n            plantingDate: (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 45).toISOString(),\n            wateringFrequency: 3,\n            icon: \"\\uD83C\\uDF39\",\n            iconColor: \"#EC4899\",\n            lastWatered: threeDaysAgo,\n            nextWatering: \"Today\",\n            status: \"needs_water\",\n            notes: \"Beautiful red blooms. Needs regular watering.\",\n            createdAt: now,\n            updatedAt: now\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(),\n            name: \"Spike\",\n            species: \"Opuntia microdasys\",\n            plantingDate: (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 60).toISOString(),\n            wateringFrequency: 14,\n            icon: \"\\uD83C\\uDF35\",\n            iconColor: \"#10B981\",\n            lastWatered: weekAgo,\n            nextWatering: \"in 7 days\",\n            status: \"healthy\",\n            notes: \"Low maintenance desert friend. Water sparingly.\",\n            createdAt: now,\n            updatedAt: now\n        },\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(),\n            name: \"Basil Buddy\",\n            species: \"Ocimum basilicum\",\n            plantingDate: (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 20).toISOString(),\n            wateringFrequency: 1,\n            icon: \"\\uD83C\\uDF3F\",\n            iconColor: \"#84CC16\",\n            lastWatered: (0,_barrel_optimize_names_addDays_format_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.subDays)(new Date(), 5).toISOString(),\n            nextWatering: \"Overdue\",\n            status: \"overdue\",\n            notes: \"Perfect for cooking! Needs daily water.\",\n            createdAt: now,\n            updatedAt: now\n        }\n    ];\n};\nconst usePlantStore = (0,zustand__WEBPACK_IMPORTED_MODULE_6__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_7__.persist)((set, get)=>({\n        plants: [],\n        recentlyWateredPlant: null,\n        loading: false,\n        error: null,\n        // Sync with database\n        syncWithDatabase: async ()=>{\n            set({\n                loading: true,\n                error: null\n            });\n            try {\n                const dbPlants = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.plantService.getPlants();\n                const localPlants = dbPlants.map(dbPlantToLocal);\n                set({\n                    plants: localPlants,\n                    loading: false\n                });\n            } catch (error) {\n                console.error(\"Failed to sync with database:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Sync failed\",\n                    loading: false\n                });\n            }\n        },\n        addPlant: async (plantData)=>{\n            set({\n                loading: true,\n                error: null\n            });\n            try {\n                const newPlant = {\n                    ...plantData,\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(),\n                    icon: plantIcons[Math.floor(Math.random() * plantIcons.length)],\n                    iconColor: plantColors[Math.floor(Math.random() * plantColors.length)],\n                    status: \"healthy\",\n                    lastWatered: \"Just planted\",\n                    nextWatering: calculateNextWatering(plantData.wateringFrequency),\n                    createdAt: new Date().toISOString(),\n                    updatedAt: new Date().toISOString()\n                };\n                // Add to database first\n                try {\n                    const dbPlant = await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.plantService.createPlant(localPlantToDb(newPlant, \"\"));\n                    // Update with actual database ID and data\n                    const finalPlant = dbPlantToLocal(dbPlant);\n                    set((state)=>({\n                            plants: [\n                                ...state.plants,\n                                finalPlant\n                            ],\n                            loading: false\n                        }));\n                } catch (dbError) {\n                    // If database fails, still add locally (offline support)\n                    console.warn(\"Database add failed, adding locally:\", dbError);\n                    set((state)=>({\n                            plants: [\n                                ...state.plants,\n                                newPlant\n                            ],\n                            loading: false\n                        }));\n                }\n            } catch (error) {\n                set({\n                    error: error instanceof Error ? error.message : \"Failed to add plant\",\n                    loading: false\n                });\n            }\n        },\n        removePlant: async (id)=>{\n            set({\n                loading: true,\n                error: null\n            });\n            try {\n                // Remove from database first\n                try {\n                    await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.plantService.deletePlant(id);\n                } catch (dbError) {\n                    console.warn(\"Database delete failed, removing locally:\", dbError);\n                }\n                set((state)=>({\n                        plants: state.plants.filter((plant)=>plant.id !== id),\n                        loading: false\n                    }));\n            } catch (error) {\n                set({\n                    error: error instanceof Error ? error.message : \"Failed to remove plant\",\n                    loading: false\n                });\n            }\n        },\n        updatePlant: async (id, updates)=>{\n            set({\n                loading: true,\n                error: null\n            });\n            try {\n                const currentPlant = get().plants.find((p)=>p.id === id);\n                if (!currentPlant) {\n                    throw new Error(\"Plant not found\");\n                }\n                const updatedData = {\n                    ...updates,\n                    updatedAt: new Date().toISOString(),\n                    status: updates.lastWatered ? getPlantStatus(updates.lastWatered, currentPlant.wateringFrequency) : updates.status || currentPlant.status\n                };\n                // Update in database first\n                try {\n                    await _utils_supabase__WEBPACK_IMPORTED_MODULE_1__.plantService.updatePlant(id, updatedData);\n                } catch (dbError) {\n                    console.warn(\"Database update failed, updating locally:\", dbError);\n                }\n                set((state)=>({\n                        plants: state.plants.map((plant)=>plant.id === id ? {\n                                ...plant,\n                                ...updatedData\n                            } : plant),\n                        loading: false\n                    }));\n            } catch (error) {\n                set({\n                    error: error instanceof Error ? error.message : \"Failed to update plant\",\n                    loading: false\n                });\n            }\n        },\n        waterPlant: async (id)=>{\n            const now = new Date().toISOString();\n            const plant = get().plants.find((p)=>p.id === id);\n            if (plant) {\n                await get().updatePlant(id, {\n                    lastWatered: now,\n                    status: \"healthy\",\n                    nextWatering: calculateNextWatering(plant.wateringFrequency)\n                });\n                set({\n                    recentlyWateredPlant: id\n                });\n                setTimeout(()=>{\n                    set({\n                        recentlyWateredPlant: null\n                    });\n                }, 3000);\n            }\n        },\n        clearRecentlyWatered: ()=>{\n            set({\n                recentlyWateredPlant: null\n            });\n        },\n        getPlantById: (id)=>{\n            return get().plants.find((plant)=>plant.id === id);\n        },\n        getHealthyPlants: ()=>{\n            return get().plants.filter((plant)=>plant.status === \"healthy\");\n        },\n        getPlantsNeedingWater: ()=>{\n            return get().plants.filter((plant)=>plant.status === \"needs_water\" || plant.status === \"overdue\");\n        },\n        initializeSampleData: ()=>{\n            const samplePlants = createSamplePlants();\n            set((state)=>({\n                    plants: [\n                        ...state.plants,\n                        ...samplePlants\n                    ]\n                }));\n        }\n    }), {\n    name: \"plant-store\",\n    partialize: (state)=>({\n            plants: state.plants,\n            recentlyWateredPlant: state.recentlyWateredPlant\n        })\n}));\n// Export a context provider for the plant store\n\nconst PlantContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_8__.createContext)(null);\nfunction PlantProvider(param) {\n    let { children } = param;\n    _s();\n    const store = usePlantStore();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PlantContext.Provider, {\n        value: store,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/michaelpreciado/Documents/GitHub/Planter/src/lib/plant-store.tsx\",\n        lineNumber: 364,\n        columnNumber: 5\n    }, this);\n}\n_s(PlantProvider, \"3GmfwQJp9AMD/25p8kljlASNbyA=\", false, function() {\n    return [\n        usePlantStore\n    ];\n});\n_c = PlantProvider;\nfunction usePlants() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(PlantContext);\n    if (!context) {\n        // Fallback to direct store access if not in provider\n        return usePlantStore();\n    }\n    return context;\n}\n_s1(usePlants, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlantProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/plant-store.tsx\n"));

/***/ })

});